簡化同步方案：LINE Bot 伺服器整合同步功能
Chinese Learning App 最佳實作方案
=========================================

## 推薦架構：單一伺服器方案

### 整體架構圖
```
Next.js Web App (Cloudflare Pages)
         ↓ (Firebase SDK)
    Firebase Firestore (Master)
         ↓ (Cloud Functions Webhook)
LINE Bot Server (Render) - 整合同步功能
         ↓ (讀寫)
    Supabase PostgreSQL (Replica)
         ↑ (LINE Bot 查詢)
LINE Platform
```

## 為什麼選擇這個方案？

### ✅ 優點
1. **只需要一個額外伺服器** - LINE Bot 伺服器
2. **架構簡單** - 減少維護複雜度
3. **成本低** - 只需要 Render 一個付費服務
4. **開發快速** - 所有邏輯在同一個專案中

### ❌ 缺點
1. **伺服器責任較重** - 同時處理 LINE Bot 和同步
2. **單點故障** - 一個服務掛了兩個功能都受影響

## 實作方案

### 1. LINE Bot 伺服器專案結構
```
linebot-server/
├── main.go                 # 應用程式入口點
├── config/
│   ├── firebase.go         # Firebase 設定 (不需要)
│   ├── supabase.go         # Supabase 設定
│   └── line.go            # LINE Bot 設定
├── handlers/
│   ├── webhook.go         # LINE Bot Webhook 處理
│   ├── sync.go            # Firebase 同步處理 ⭐ 新增
│   ├── message.go         # 訊息處理
│   └── postback.go        # 互動回應處理
├── services/
│   ├── character.go       # 字詞查詢服務
│   ├── lesson.go          # 課程資料服務
│   ├── sync.go           # 同步服務 ⭐ 新增
│   └── user.go           # 用戶管理服務
├── models/
│   ├── firebase.go       # Firebase 資料模型 ⭐ 新增
│   ├── supabase.go       # Supabase 資料模型
│   └── sync.go           # 同步記錄模型 ⭐ 新增
└── migrations/
    └── initial_sync.go   # 初始資料遷移 ⭐ 新增
```

### 2. 核心功能實作

#### Supabase 設定
```go
// config/supabase.go
package config

import (
    "os"
    "github.com/supabase-community/supabase-go"
)

func InitSupabase() *supabase.Client {
    url := os.Getenv("SUPABASE_URL")
    key := os.Getenv("SUPABASE_SERVICE_KEY")
    
    return supabase.CreateClient(url, key)
}
```

#### 同步處理端點
```go
// handlers/sync.go
package handlers

import (
    "net/http"
    "github.com/gin-gonic/gin"
)

type SyncHandler struct {
    supabase *supabase.Client
}

type FirebaseSyncRequest struct {
    Operation  string                 `json:"operation"`
    Collection string                 `json:"collection"`
    DocumentID string                 `json:"documentId"`
    Data       map[string]interface{} `json:"data"`
}

// 接收 Firebase Cloud Functions 的同步請求
func (h *SyncHandler) HandleFirebaseSync(c *gin.Context) {
    var req FirebaseSyncRequest
    if err := c.ShouldBindJSON(&req); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
        return
    }
    
    // 驗證請求來源
    if !h.validateFirebaseRequest(c) {
        c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
        return
    }
    
    // 根據集合類型處理同步
    switch req.Collection {
    case "lessons":
        err := h.syncLesson(req.Operation, req.DocumentID, req.Data)
        if err != nil {
            c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
            return
        }
    case "characters":
        err := h.syncCharacter(req.Operation, req.DocumentID, req.Data)
        if err != nil {
            c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
            return
        }
    default:
        c.JSON(http.StatusBadRequest, gin.H{"error": "Unknown collection"})
        return
    }
    
    c.JSON(http.StatusOK, gin.H{"status": "success"})
}

func (h *SyncHandler) syncLesson(operation, docID string, data map[string]interface{}) error {
    switch operation {
    case "create", "update":
        return h.upsertLesson(docID, data)
    case "delete":
        return h.deleteLesson(docID)
    default:
        return fmt.Errorf("unknown operation: %s", operation)
    }
}
```

#### 字詞查詢服務 (使用 Supabase)
```go
// services/character.go
package services

import (
    "fmt"
    "github.com/supabase-community/supabase-go"
)

type CharacterService struct {
    supabase *supabase.Client
}

type Character struct {
    ID          int      `json:"id"`
    Character   string   `json:"character"`
    Zhuyin      string   `json:"zhuyin"`
    StrokeCount int      `json:"stroke_count"`
    Examples    []string `json:"examples"`
    Lessons     []string `json:"lessons"`
}

func (s *CharacterService) LookupCharacter(char string) (*Character, error) {
    var result []Character
    
    _, err := s.supabase.From("characters").
        Select("*").
        Eq("character", char).
        Execute(&result)
    
    if err != nil {
        return nil, fmt.Errorf("failed to lookup character: %w", err)
    }
    
    if len(result) == 0 {
        return nil, fmt.Errorf("character not found: %s", char)
    }
    
    return &result[0], nil
}

// 複雜查詢範例：獲取課程的所有字詞
func (s *CharacterService) GetLessonCharacters(publisher string, grade, semester, lesson int) ([]Character, error) {
    var result []Character
    
    query := `
        SELECT c.* 
        FROM characters c
        JOIN lesson_characters lc ON c.id = lc.character_id
        JOIN lessons l ON lc.lesson_id = l.firebase_id
        JOIN publishers p ON l.publisher_id = p.id
        WHERE p.name = ? AND l.grade = ? AND l.semester = ? AND l.lesson_number = ?
        ORDER BY c.character
    `
    
    _, err := s.supabase.Rpc("execute_sql", map[string]interface{}{
        "query": query,
        "params": []interface{}{publisher, grade, semester, lesson},
    }).Execute(&result)
    
    if err != nil {
        return nil, fmt.Errorf("failed to get lesson characters: %w", err)
    }
    
    return result, nil
}
```

### 3. 主程式整合
```go
// main.go
package main

import (
    "log"
    "os"
    
    "github.com/gin-gonic/gin"
    "github.com/line/line-bot-sdk-go/v7/linebot"
    
    "your-project/config"
    "your-project/handlers"
    "your-project/services"
)

func main() {
    // 初始化服務
    supabaseClient := config.InitSupabase()
    lineBot := config.InitLineBot()
    
    // 初始化服務層
    characterService := &services.CharacterService{Supabase: supabaseClient}
    lessonService := &services.LessonService{Supabase: supabaseClient}
    
    // 初始化處理器
    lineHandler := &handlers.LineHandler{
        Bot:              lineBot,
        CharacterService: characterService,
        LessonService:    lessonService,
    }
    
    syncHandler := &handlers.SyncHandler{Supabase: supabaseClient}
    
    // 設定路由
    r := gin.Default()
    
    // LINE Bot 路由
    r.POST("/webhook", lineHandler.HandleWebhook)
    
    // Firebase 同步路由 ⭐ 新增
    r.POST("/sync/firebase", syncHandler.HandleFirebaseSync)
    
    // 健康檢查
    r.GET("/health", func(c *gin.Context) {
        c.JSON(200, gin.H{"status": "ok"})
    })
    
    // 手動同步端點 (用於初始遷移)
    r.POST("/sync/manual", syncHandler.ManualSync)
    
    port := os.Getenv("PORT")
    if port == "" {
        port = "8080"
    }
    
    log.Printf("Server starting on port %s", port)
    r.Run(":" + port)
}
```

### 4. Firebase Cloud Functions (簡化版)
```javascript
// functions/index.js
const functions = require('firebase-functions');
const fetch = require('node-fetch');

const LINEBOT_SERVER_URL = 'https://your-linebot-server.render.com';
const SYNC_SECRET = functions.config().sync.secret;

// 統一的同步函數
async function syncToLineBot(collection, operation, documentId, data) {
  try {
    const response = await fetch(`${LINEBOT_SERVER_URL}/sync/firebase`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SYNC_SECRET}`
      },
      body: JSON.stringify({
        collection: collection,
        operation: operation,
        documentId: documentId,
        data: data
      })
    });
    
    if (!response.ok) {
      throw new Error(`Sync failed: ${response.status}`);
    }
    
    console.log(`${collection}/${documentId} synced successfully`);
  } catch (error) {
    console.error(`Failed to sync ${collection}/${documentId}:`, error);
  }
}

// 課程同步
exports.syncLessons = functions.firestore
  .document('lessons/{lessonId}')
  .onWrite(async (change, context) => {
    const documentId = context.params.lessonId;
    let operation, data;
    
    if (!change.before.exists) {
      operation = 'create';
      data = change.after.data();
    } else if (!change.after.exists) {
      operation = 'delete';
      data = change.before.data();
    } else {
      operation = 'update';
      data = change.after.data();
    }
    
    await syncToLineBot('lessons', operation, documentId, data);
  });

// 字詞同步
exports.syncCharacters = functions.firestore
  .document('characters/{characterId}')
  .onWrite(async (change, context) => {
    const documentId = context.params.characterId;
    let operation, data;
    
    if (!change.before.exists) {
      operation = 'create';
      data = change.after.data();
    } else if (!change.after.exists) {
      operation = 'delete';
      data = change.before.data();
    } else {
      operation = 'update';
      data = change.after.data();
    }
    
    await syncToLineBot('characters', operation, documentId, data);
  });
```

### 5. 初始資料遷移
```go
// migrations/initial_sync.go
package main

import (
    "context"
    "log"
    "os"
    
    "cloud.google.com/go/firestore"
    "firebase.google.com/go/v4"
    "github.com/supabase-community/supabase-go"
)

func main() {
    // 這個腳本只需要執行一次，用於初始資料遷移
    ctx := context.Background()
    
    // 初始化 Firebase (讀取歷史資料)
    app, err := firebase.NewApp(ctx, nil)
    if err != nil {
        log.Fatal(err)
    }
    
    firestoreClient, err := app.Firestore(ctx)
    if err != nil {
        log.Fatal(err)
    }
    defer firestoreClient.Close()
    
    // 初始化 Supabase (寫入資料)
    supabaseClient := supabase.CreateClient(
        os.Getenv("SUPABASE_URL"),
        os.Getenv("SUPABASE_SERVICE_KEY"),
    )
    
    log.Println("Starting initial data migration...")
    
    // 遷移課程資料
    err = migrateLessonsFromFirebase(ctx, firestoreClient, supabaseClient)
    if err != nil {
        log.Fatal("Failed to migrate lessons:", err)
    }
    
    // 遷移字詞資料
    err = migrateCharactersFromFirebase(ctx, firestoreClient, supabaseClient)
    if err != nil {
        log.Fatal("Failed to migrate characters:", err)
    }
    
    log.Println("Initial migration completed successfully!")
}
```

## 實施步驟

### Phase 1: 準備工作 (3-5 天)
1. ✅ 建立 Supabase 專案
2. ✅ 設計 PostgreSQL Schema
3. ✅ 開發 LINE Bot 伺服器基礎結構

### Phase 2: 核心開發 (1-2 週)
1. ✅ 實作字詞查詢功能 (Supabase)
2. ✅ 實作 LINE Bot 基本功能
3. ✅ 開發同步接收端點

### Phase 3: 同步設定 (1 週)
1. ✅ 設定 Firebase Cloud Functions
2. ✅ 測試即時同步功能
3. ✅ 執行初始資料遷移

### Phase 4: 測試部署 (3-5 天)
1. ✅ 部署到 Render
2. ✅ 完整功能測試
3. ✅ 效能調優

## 環境變數設定
```bash
# LINE Bot
LINE_CHANNEL_SECRET=your_secret
LINE_CHANNEL_ACCESS_TOKEN=your_token

# Supabase
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_SERVICE_KEY=your_service_key

# 同步認證
SYNC_SECRET=your_sync_secret

# 伺服器設定
PORT=8080
GIN_MODE=release
```

## 總結

### 這個方案的優勢：
✅ **只需要一個額外伺服器** - LINE Bot Server
✅ **開發時間短** - 2-3 週完成
✅ **成本低** - Render $7/月 + Supabase 免費方案
✅ **維護簡單** - 所有邏輯在同一個專案
✅ **風險可控** - 可以隨時關閉同步功能回到純查詢模式

### 與其他方案比較：
- **vs 獨立同步伺服器**: 少一個伺服器，成本和複雜度更低
- **vs 純 Supabase**: 有即時同步，資料一致性更好
- **vs 純 Firebase**: 享受 PostgreSQL 的強大查詢能力

這是最平衡的方案，既能體驗 Supabase 的優勢，又不會增加太多複雜度！